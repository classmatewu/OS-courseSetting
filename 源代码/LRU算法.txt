/*****LRU(最近最少使用)算法******/
/*
 *算法思路：
 * 建立两个数组，并且将第二个数组当队列使用，即将每次进来的从后面进入，删除的从前面删除，
 * 并且关键是将不缺页时重新访问的那个元素调出来重新插到最后一个
 *
 * 相关的数组类的方法：
 * splice():指定数组下标删除某元素
 */
"use strict";
var arr1 = [2,3,2,1,5,2,4,5,3,2,5,2]; //页地址流数组
var arr2 = []; //页框数组
var num = 0; //缺页次数
for(var i = 0; i < arr1.length; i++) { //循环页地址流数组
    if(arr2.length < 3) { //页框初始化时
        if((arr2.indexOf(arr1[i])) == -1) { //页框队列里的元素都不与页地址流的页号不重复时
            arr2.push(arr1[i]); //新的页号直接插入页框队列尾部
        } else { //页框队列里有元素与页地址流的页号重复时，将该页号调出插到队列尾
            arr2.splice(arr2.indexOf(arr1[i]), 1); //删除该元素
            arr2.push(arr1[i]); //插到队列尾
        }
    } else { //页框初始化后
        if((arr2.indexOf(arr1[i])) == -1) { //不重复时,删除队头页号，新的页号插入队列尾
            arr2.shift(); //删除队头页号
            arr2.push(arr1[i]); //新来的页号插到队列尾
            num++; //缺页数加1
            document.write(`缺页时：${arr2}`);
        } else { //重复时，与初始化时的有重复时的处理一样,将该重复的页号调到队列尾
            arr2.splice(arr2.indexOf(arr1[i]), 1); //删除
            arr2.push(arr1[i]); //重新插到队列尾
            document.write(`不缺页时：${arr2}`);
        }
    }
}